// @ts-nocheck
/**
 * BillsOfExchange
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base'

/**
 *
 * @export
 * @interface BillOfExchangeDetailDto
 */
export interface BillOfExchangeDetailDto {
  /**
   *
   * @type {number}
   * @memberof BillOfExchangeDetailDto
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof BillOfExchangeDetailDto
   */
  drawerId?: number
  /**
   *
   * @type {number}
   * @memberof BillOfExchangeDetailDto
   */
  beneficiaryId?: number
  /**
   *
   * @type {number}
   * @memberof BillOfExchangeDetailDto
   */
  amount?: number
  /**
   *
   * @type {PartyDto}
   * @memberof BillOfExchangeDetailDto
   */
  drawer?: PartyDto
  /**
   *
   * @type {PartyDto}
   * @memberof BillOfExchangeDetailDto
   */
  firstBeneficiary?: PartyDto
}
/**
 *
 * @export
 * @interface BillOfExchangeDto
 */
export interface BillOfExchangeDto {
  /**
   *
   * @type {number}
   * @memberof BillOfExchangeDto
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof BillOfExchangeDto
   */
  drawerId?: number
  /**
   *
   * @type {number}
   * @memberof BillOfExchangeDto
   */
  beneficiaryId?: number
  /**
   *
   * @type {number}
   * @memberof BillOfExchangeDto
   */
  amount?: number
}
/**
 *
 * @export
 * @interface BillOfExchangeDtoPagedResultDto
 */
export interface BillOfExchangeDtoPagedResultDto {
  /**
   *
   * @type {number}
   * @memberof BillOfExchangeDtoPagedResultDto
   */
  count?: number
  /**
   *
   * @type {Array<BillOfExchangeDto>}
   * @memberof BillOfExchangeDtoPagedResultDto
   */
  data?: Array<BillOfExchangeDto> | null
}
/**
 *
 * @export
 * @interface EndorsementDto
 */
export interface EndorsementDto {
  /**
   *
   * @type {number}
   * @memberof EndorsementDto
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof EndorsementDto
   */
  billId?: number
  /**
   *
   * @type {number}
   * @memberof EndorsementDto
   */
  newBeneficiary?: number
  /**
   *
   * @type {number}
   * @memberof EndorsementDto
   */
  previousEndorsementId?: number | null
}
/**
 *
 * @export
 * @interface PartyDto
 */
export interface PartyDto {
  /**
   *
   * @type {number}
   * @memberof PartyDto
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof PartyDto
   */
  name?: string | null
}
/**
 *
 * @export
 * @interface PartyDtoPagedResultDto
 */
export interface PartyDtoPagedResultDto {
  /**
   *
   * @type {number}
   * @memberof PartyDtoPagedResultDto
   */
  count?: number
  /**
   *
   * @type {Array<PartyDto>}
   * @memberof PartyDtoPagedResultDto
   */
  data?: Array<PartyDto> | null
}

/**
 * BillsOfExchangeApi - axios parameter creator
 * @export
 */
export const BillsOfExchangeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} [beneficiaryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    billsOfExchangeGetByBeneficiaryIdGet: async (
      beneficiaryId?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/BillsOfExchange/getByBeneficiaryId`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (beneficiaryId !== undefined) {
        localVarQueryParameter['beneficiaryId'] = beneficiaryId
      }

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [drawerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    billsOfExchangeGetByDrawerIdGet: async (drawerId?: number, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/BillsOfExchange/getByDrawerId`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (drawerId !== undefined) {
        localVarQueryParameter['drawerId'] = drawerId
      }

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    billsOfExchangeGetByIdIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling billsOfExchangeGetByIdIdGet.'
        )
      }
      const localVarPath = `/BillsOfExchange/getById/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} billId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    billsOfExchangeGetEndorsementBillIdGet: async (
      billId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'billId' is not null or undefined
      if (billId === null || billId === undefined) {
        throw new RequiredError(
          'billId',
          'Required parameter billId was null or undefined when calling billsOfExchangeGetEndorsementBillIdGet.'
        )
      }
      const localVarPath = `/BillsOfExchange/getEndorsement/{billId}`.replace(
        `{${'billId'}}`,
        encodeURIComponent(String(billId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    billsOfExchangeGetGet: async (skip?: number, take?: number, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/BillsOfExchange/get`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (skip !== undefined) {
        localVarQueryParameter['Skip'] = skip
      }

      if (take !== undefined) {
        localVarQueryParameter['Take'] = take
      }

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * BillsOfExchangeApi - functional programming interface
 * @export
 */
export const BillsOfExchangeApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} [beneficiaryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async billsOfExchangeGetByBeneficiaryIdGet(
      beneficiaryId?: number,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BillOfExchangeDto>>> {
      const localVarAxiosArgs = await BillsOfExchangeApiAxiosParamCreator(
        configuration
      ).billsOfExchangeGetByBeneficiaryIdGet(beneficiaryId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [drawerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async billsOfExchangeGetByDrawerIdGet(
      drawerId?: number,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BillOfExchangeDto>>> {
      const localVarAxiosArgs = await BillsOfExchangeApiAxiosParamCreator(
        configuration
      ).billsOfExchangeGetByDrawerIdGet(drawerId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async billsOfExchangeGetByIdIdGet(
      id: number,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillOfExchangeDetailDto>> {
      const localVarAxiosArgs = await BillsOfExchangeApiAxiosParamCreator(
        configuration
      ).billsOfExchangeGetByIdIdGet(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} billId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async billsOfExchangeGetEndorsementBillIdGet(
      billId: number,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EndorsementDto>>> {
      const localVarAxiosArgs = await BillsOfExchangeApiAxiosParamCreator(
        configuration
      ).billsOfExchangeGetEndorsementBillIdGet(billId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async billsOfExchangeGetGet(
      skip?: number,
      take?: number,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillOfExchangeDtoPagedResultDto>> {
      const localVarAxiosArgs = await BillsOfExchangeApiAxiosParamCreator(
        configuration
      ).billsOfExchangeGetGet(skip, take, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * BillsOfExchangeApi - factory interface
 * @export
 */
export const BillsOfExchangeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {number} [beneficiaryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    billsOfExchangeGetByBeneficiaryIdGet(
      beneficiaryId?: number,
      options?: any
    ): AxiosPromise<Array<BillOfExchangeDto>> {
      return BillsOfExchangeApiFp(configuration)
        .billsOfExchangeGetByBeneficiaryIdGet(beneficiaryId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [drawerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    billsOfExchangeGetByDrawerIdGet(
      drawerId?: number,
      options?: any
    ): AxiosPromise<Array<BillOfExchangeDto>> {
      return BillsOfExchangeApiFp(configuration)
        .billsOfExchangeGetByDrawerIdGet(drawerId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    billsOfExchangeGetByIdIdGet(id: number, options?: any): AxiosPromise<BillOfExchangeDetailDto> {
      return BillsOfExchangeApiFp(configuration)
        .billsOfExchangeGetByIdIdGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} billId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    billsOfExchangeGetEndorsementBillIdGet(
      billId: number,
      options?: any
    ): AxiosPromise<Array<EndorsementDto>> {
      return BillsOfExchangeApiFp(configuration)
        .billsOfExchangeGetEndorsementBillIdGet(billId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    billsOfExchangeGetGet(
      skip?: number,
      take?: number,
      options?: any
    ): AxiosPromise<BillOfExchangeDtoPagedResultDto> {
      return BillsOfExchangeApiFp(configuration)
        .billsOfExchangeGetGet(skip, take, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * BillsOfExchangeApi - object-oriented interface
 * @export
 * @class BillsOfExchangeApi
 * @extends {BaseAPI}
 */
export class BillsOfExchangeApi extends BaseAPI {
  /**
   *
   * @param {number} [beneficiaryId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BillsOfExchangeApi
   */
  public billsOfExchangeGetByBeneficiaryIdGet(beneficiaryId?: number, options?: any) {
    return BillsOfExchangeApiFp(this.configuration)
      .billsOfExchangeGetByBeneficiaryIdGet(beneficiaryId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [drawerId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BillsOfExchangeApi
   */
  public billsOfExchangeGetByDrawerIdGet(drawerId?: number, options?: any) {
    return BillsOfExchangeApiFp(this.configuration)
      .billsOfExchangeGetByDrawerIdGet(drawerId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BillsOfExchangeApi
   */
  public billsOfExchangeGetByIdIdGet(id: number, options?: any) {
    return BillsOfExchangeApiFp(this.configuration)
      .billsOfExchangeGetByIdIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} billId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BillsOfExchangeApi
   */
  public billsOfExchangeGetEndorsementBillIdGet(billId: number, options?: any) {
    return BillsOfExchangeApiFp(this.configuration)
      .billsOfExchangeGetEndorsementBillIdGet(billId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [skip]
   * @param {number} [take]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BillsOfExchangeApi
   */
  public billsOfExchangeGetGet(skip?: number, take?: number, options?: any) {
    return BillsOfExchangeApiFp(this.configuration)
      .billsOfExchangeGetGet(skip, take, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PartyApi - axios parameter creator
 * @export
 */
export const PartyApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {Array<number>} [ids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partyGetByIdsGet: async (ids?: Array<number>, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/Party/getByIds`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (ids) {
        localVarQueryParameter['ids'] = ids
      }

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partyGetGet: async (skip?: number, take?: number, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/Party/get`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (skip !== undefined) {
        localVarQueryParameter['Skip'] = skip
      }

      if (take !== undefined) {
        localVarQueryParameter['Take'] = take
      }

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PartyApi - functional programming interface
 * @export
 */
export const PartyApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {Array<number>} [ids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partyGetByIdsGet(
      ids?: Array<number>,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PartyDto>>> {
      const localVarAxiosArgs = await PartyApiAxiosParamCreator(configuration).partyGetByIdsGet(ids, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partyGetGet(
      skip?: number,
      take?: number,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartyDtoPagedResultDto>> {
      const localVarAxiosArgs = await PartyApiAxiosParamCreator(configuration).partyGetGet(
        skip,
        take,
        options
      )
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * PartyApi - factory interface
 * @export
 */
export const PartyApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {Array<number>} [ids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partyGetByIdsGet(ids?: Array<number>, options?: any): AxiosPromise<Array<PartyDto>> {
      return PartyApiFp(configuration)
        .partyGetByIdsGet(ids, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partyGetGet(skip?: number, take?: number, options?: any): AxiosPromise<PartyDtoPagedResultDto> {
      return PartyApiFp(configuration)
        .partyGetGet(skip, take, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PartyApi - object-oriented interface
 * @export
 * @class PartyApi
 * @extends {BaseAPI}
 */
export class PartyApi extends BaseAPI {
  /**
   *
   * @param {Array<number>} [ids]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PartyApi
   */
  public partyGetByIdsGet(ids?: Array<number>, options?: any) {
    return PartyApiFp(this.configuration)
      .partyGetByIdsGet(ids, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [skip]
   * @param {number} [take]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PartyApi
   */
  public partyGetGet(skip?: number, take?: number, options?: any) {
    return PartyApiFp(this.configuration)
      .partyGetGet(skip, take, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
