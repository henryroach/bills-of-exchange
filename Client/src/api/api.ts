// @tslint:disable
/**
 * BillsOfExchange
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BillOfExchangeDto
 */
export interface BillOfExchangeDto {
    /**
     * 
     * @type {number}
     * @memberof BillOfExchangeDto
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof BillOfExchangeDto
     */
    drawerId?: number;
    /**
     * 
     * @type {number}
     * @memberof BillOfExchangeDto
     */
    beneficiaryId?: number;
    /**
     * 
     * @type {number}
     * @memberof BillOfExchangeDto
     */
    amount?: number;
}
/**
 * 
 * @export
 * @interface BillOfExchangeDtoPagedResultDto
 */
export interface BillOfExchangeDtoPagedResultDto {
    /**
     * 
     * @type {number}
     * @memberof BillOfExchangeDtoPagedResultDto
     */
    count?: number;
    /**
     * 
     * @type {Array<BillOfExchangeDto>}
     * @memberof BillOfExchangeDtoPagedResultDto
     */
    data?: Array<BillOfExchangeDto> | null;
}
/**
 * 
 * @export
 * @interface EndorsementDto
 */
export interface EndorsementDto {
    /**
     * 
     * @type {number}
     * @memberof EndorsementDto
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof EndorsementDto
     */
    billId?: number;
    /**
     * 
     * @type {number}
     * @memberof EndorsementDto
     */
    newBeneficiaryId?: number;
    /**
     * 
     * @type {number}
     * @memberof EndorsementDto
     */
    previousEndorsementId?: number | null;
}
/**
 * 
 * @export
 * @interface PagedRequestDto
 */
export interface PagedRequestDto {
    /**
     * 
     * @type {number}
     * @memberof PagedRequestDto
     */
    skip?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedRequestDto
     */
    take?: number;
}
/**
 * 
 * @export
 * @interface PartyDto
 */
export interface PartyDto {
    /**
     * 
     * @type {number}
     * @memberof PartyDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PartyDto
     */
    name?: string | null;
}
/**
 * 
 * @export
 * @interface PartyDtoPagedResultDto
 */
export interface PartyDtoPagedResultDto {
    /**
     * 
     * @type {number}
     * @memberof PartyDtoPagedResultDto
     */
    count?: number;
    /**
     * 
     * @type {Array<PartyDto>}
     * @memberof PartyDtoPagedResultDto
     */
    data?: Array<PartyDto> | null;
}

/**
 * BillsOfExchangeApi - axios parameter creator
 * @export
 */
export const BillsOfExchangeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [beneficiaryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsOfExchangeGetByBeneficiaryIdGet: async (beneficiaryId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/BillsOfExchange/getByBeneficiaryId`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (beneficiaryId !== undefined) {
                localVarQueryParameter['beneficiaryId'] = beneficiaryId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [drawerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsOfExchangeGetByDrawerIdGet: async (drawerId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/BillsOfExchange/getByDrawerId`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (drawerId !== undefined) {
                localVarQueryParameter['drawerId'] = drawerId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [billId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsOfExchangeGetEndorsementGet: async (billId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/BillsOfExchange/getEndorsement`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (billId !== undefined) {
                localVarQueryParameter['billId'] = billId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PagedRequestDto} [pagedRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsOfExchangeGetGet: async (pagedRequestDto?: PagedRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/BillsOfExchange/get`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof pagedRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pagedRequestDto !== undefined ? pagedRequestDto : {}) : (pagedRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillsOfExchangeApi - functional programming interface
 * @export
 */
export const BillsOfExchangeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [beneficiaryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billsOfExchangeGetByBeneficiaryIdGet(beneficiaryId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BillOfExchangeDto>>> {
            const localVarAxiosArgs = await BillsOfExchangeApiAxiosParamCreator(configuration).billsOfExchangeGetByBeneficiaryIdGet(beneficiaryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [drawerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billsOfExchangeGetByDrawerIdGet(drawerId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BillOfExchangeDto>>> {
            const localVarAxiosArgs = await BillsOfExchangeApiAxiosParamCreator(configuration).billsOfExchangeGetByDrawerIdGet(drawerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [billId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billsOfExchangeGetEndorsementGet(billId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EndorsementDto>>> {
            const localVarAxiosArgs = await BillsOfExchangeApiAxiosParamCreator(configuration).billsOfExchangeGetEndorsementGet(billId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PagedRequestDto} [pagedRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billsOfExchangeGetGet(pagedRequestDto?: PagedRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillOfExchangeDtoPagedResultDto>> {
            const localVarAxiosArgs = await BillsOfExchangeApiAxiosParamCreator(configuration).billsOfExchangeGetGet(pagedRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BillsOfExchangeApi - factory interface
 * @export
 */
export const BillsOfExchangeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [beneficiaryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsOfExchangeGetByBeneficiaryIdGet(beneficiaryId?: number, options?: any): AxiosPromise<Array<BillOfExchangeDto>> {
            return BillsOfExchangeApiFp(configuration).billsOfExchangeGetByBeneficiaryIdGet(beneficiaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [drawerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsOfExchangeGetByDrawerIdGet(drawerId?: number, options?: any): AxiosPromise<Array<BillOfExchangeDto>> {
            return BillsOfExchangeApiFp(configuration).billsOfExchangeGetByDrawerIdGet(drawerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [billId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsOfExchangeGetEndorsementGet(billId?: number, options?: any): AxiosPromise<Array<EndorsementDto>> {
            return BillsOfExchangeApiFp(configuration).billsOfExchangeGetEndorsementGet(billId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PagedRequestDto} [pagedRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsOfExchangeGetGet(pagedRequestDto?: PagedRequestDto, options?: any): AxiosPromise<BillOfExchangeDtoPagedResultDto> {
            return BillsOfExchangeApiFp(configuration).billsOfExchangeGetGet(pagedRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BillsOfExchangeApi - object-oriented interface
 * @export
 * @class BillsOfExchangeApi
 * @extends {BaseAPI}
 */
export class BillsOfExchangeApi extends BaseAPI {
    /**
     * 
     * @param {number} [beneficiaryId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsOfExchangeApi
     */
    public billsOfExchangeGetByBeneficiaryIdGet(beneficiaryId?: number, options?: any) {
        return BillsOfExchangeApiFp(this.configuration).billsOfExchangeGetByBeneficiaryIdGet(beneficiaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [drawerId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsOfExchangeApi
     */
    public billsOfExchangeGetByDrawerIdGet(drawerId?: number, options?: any) {
        return BillsOfExchangeApiFp(this.configuration).billsOfExchangeGetByDrawerIdGet(drawerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [billId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsOfExchangeApi
     */
    public billsOfExchangeGetEndorsementGet(billId?: number, options?: any) {
        return BillsOfExchangeApiFp(this.configuration).billsOfExchangeGetEndorsementGet(billId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PagedRequestDto} [pagedRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsOfExchangeApi
     */
    public billsOfExchangeGetGet(pagedRequestDto?: PagedRequestDto, options?: any) {
        return BillsOfExchangeApiFp(this.configuration).billsOfExchangeGetGet(pagedRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * PartyApi - axios parameter creator
 * @export
 */
export const PartyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PagedRequestDto} [pagedRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partyGetGet: async (pagedRequestDto?: PagedRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Party/get`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof pagedRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pagedRequestDto !== undefined ? pagedRequestDto : {}) : (pagedRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartyApi - functional programming interface
 * @export
 */
export const PartyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PagedRequestDto} [pagedRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partyGetGet(pagedRequestDto?: PagedRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartyDtoPagedResultDto>> {
            const localVarAxiosArgs = await PartyApiAxiosParamCreator(configuration).partyGetGet(pagedRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PartyApi - factory interface
 * @export
 */
export const PartyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {PagedRequestDto} [pagedRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partyGetGet(pagedRequestDto?: PagedRequestDto, options?: any): AxiosPromise<PartyDtoPagedResultDto> {
            return PartyApiFp(configuration).partyGetGet(pagedRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartyApi - object-oriented interface
 * @export
 * @class PartyApi
 * @extends {BaseAPI}
 */
export class PartyApi extends BaseAPI {
    /**
     * 
     * @param {PagedRequestDto} [pagedRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public partyGetGet(pagedRequestDto?: PagedRequestDto, options?: any) {
        return PartyApiFp(this.configuration).partyGetGet(pagedRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

}


